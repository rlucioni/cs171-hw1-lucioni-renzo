// Generated by CoffeeScript 1.7.1
var barPadding, canvasHeight, canvasWidth, g, labelPadding, margin, state, svg, textHorizontalScale, textSizeScale, textVerticalScale, title, xScale, yScale;

margin = {
  top: 50,
  bottom: 10,
  left: 250,
  right: 40
};

canvasWidth = 1000 - margin.left - margin.right;

canvasHeight = 1000 - margin.top - margin.bottom;

barPadding = 0.05;

labelPadding = -10;

textHorizontalScale = 1.5;

textVerticalScale = 0.77;

textSizeScale = 21.25;

xScale = d3.scale.linear().range([0, canvasWidth]);

yScale = d3.scale.ordinal().rangeRoundBands([0, canvasHeight], barPadding);

state = function(d) {
  return d.State;
};

svg = d3.select("body").append("svg").attr("width", canvasWidth + margin.left + margin.right).attr("height", canvasHeight + margin.top + margin.bottom);

g = svg.append("g").attr("transform", "translate(" + margin.left + ", " + margin.top + ")");

title = g.append("text").attr("id", "title").attr("x", svg.attr("width") / 2).attr("text-anchor", "middle").text("Unemployment Rates for States");

d3.tsv("unemp_states_us_nov_2013.tsv", function(data) {
  var ascending, bars, groups, labels, max, min, reorder, values;
  max = d3.max(data, function(d) {
    return d.Rate;
  });
  min = 0;
  xScale.domain([min, max]);
  yScale.domain(data.map(state));
  groups = g.append("g").selectAll("g").data(data).enter().append("g").attr("transform", function(d) {
    return "translate(0, " + (yScale(d.State)) + ")";
  });
  bars = groups.append("rect").attr("width", function(d) {
    return xScale(d.Rate);
  }).attr("height", yScale.rangeBand());
  labels = groups.append("text").attr("x", labelPadding).attr("y", yScale.rangeBand() * textVerticalScale).attr("font-size", "" + (yScale.rangeBand() / textSizeScale) + "em").attr("text-anchor", "end").text(function(d) {
    return d.State;
  });
  values = groups.append("text").attr("x", function(d) {
    return xScale(d.Rate) - yScale.rangeBand() * textHorizontalScale;
  }).attr("y", yScale.rangeBand() * textVerticalScale).attr("font-size", "" + (yScale.rangeBand() / textSizeScale) + "em").attr("fill", "white").attr("text-anchor", "start").text(function(d) {
    return d.Rate;
  });
  ascending = true;
  reorder = function() {
    ascending = !ascending;
    svg.selectAll("rect").sort(function(a, b) {
      if (ascending) {
        return d3.ascending(a[2], b[2]);
      } else {
        return d3.descending(a[2], b[2]);
      }
    });
    bars.transition().delay(function(d, i) {
      return i * 50;
    }).duration(1000).attr("transform", function(d, i) {
      return "translate(0, " + (yScale(d.State)) + ")";
    });
    return svg.selectAll("#label").sort(function(a, b) {
      if (ascending) {
        return d3.ascending(a, b);
      } else {
        return d3.descending(a, b);
      }
    }).transition().delay(function(d, i) {
      return i * 50;
    }).duration(1000).attr("y", function(d, i) {
      return yScale.rangeBand() - 4;
    });
  };
  return bars.on("click", function() {
    return reorder();
  });
});
